n = width(erbs)
gccontent = rowSums(gc)/n
gccontent
x = GRanges("chr1", IRanges(c(101,201,401,501),c(150,250,450,550)), strand="+")
y = GRanges("chr1", IRanges(c(101,221,301,401,541),c(150,250,350,470,550)), strand="+")
par(mfrow=c(2,1))
plotGRanges(x)
plotGRanges(y)
library(IRanges)
plotGRanges(x)
plotGRanges = function(x) plotRanges(ranges(x))
plotGRanges(x)
library(ph525x)
par(mfrow=c(2,1))
plotGRanges(x)
plotGRanges(y)
shiny::runApp('Downloads/hefner-app')
library(ERBS)
library(ph525x)
stopifnot(packageVersion("ph525x") >= "0.0.16") # do over if fail
modPlot("ESR1", useGeneSym=FALSE, collapse=FALSE)
packageVersion("ph525x")
modPlot("ESR1", useGeneSym=FALSE, collapse=FALSE)
library(gvis)
library(Gvis)
library(Gviz)
library(ph525x)
library(BiocInstaller)
biocLite("Gviz")
library(Gviz)
modPlot("ESR1", useGeneSym=FALSE, collapse=FALSE)
library("acepack", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
modPlot("ESR1", useGeneSym=FALSE, collapse=FALSE)
library(acepack)
library(acepack)
library(acepack)
install.packages("acepack")
library(acepack)
modPlot("ESR1", useGeneSym=FALSE, collapse=FALSE)
library(Gviz)
library(acepack)
modPlot("ESR1", useGeneSym=FALSE, collapse=FALSE)
library("acepack", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
remove.packages("acepack")
install.packages("acepack")
library(acepack)
remove.packages("acepack")
library(BiocInstaller)
library(ERBS)
library(IRanges)
library(ph525x)
library(BSgenome.Hsapiens.UCSC.hg19)
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg19.masked)
library(rtracklayer)
library(Gviz)
install.packages("acepack")
library(Gviz)
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
remove.packages("Hmisc")
install.packages("Hmisc")
library(Gviz)
remove.packages("Hmisc")
install.packages("Hmisc")
library(BiocInstaller)
library(ERBS)
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg19.masked)
library(rtracklayer)
library(ph525x)
library(Gviz)
data(HepG2)
ch = import.chain("hg19ToHg38.over.chain")
nHepG2 = liftOver(HepG2, ch)
start(HepG2[1])-start(nHepG2[1])
modPlot("ESR1", useGeneSym=FALSE, collapse=FALSE)
str(ERS1)
str(chr6)
?modPlot
length(transcriptsBy(Homo.sapiens, by="gene")$"2099")
library(rtracklayer)
data(targets)
class(targets)
library(GenomicRanges)
mtar = with(targets,
GRanges(chrom, IRanges(start,end), strand=strand,
targets=target, mirname=name))
cat(export(mtar[1:5], format="bed"), sep="\n")
cat("\n")
cat(export(mtar[1:5], format="gff3"), sep="\n")
View(targets)
str(targets)
str(mtar)
cat(export(mtar[1:5], format="bed"), sep="\n")
cat("\n")
cat(export(mtar[1:5], format="gff3"), sep="\n")
library(AnnotationHub)
biocLite(AnnotationHub)
biocLite("AnnotationHub")
library(AnnotationHub)
ah = AnnotationHub()
mah = metadata(ah)
names(mah)
sort(table(mah$Species), decreasing=TRUE)[1:10]
remove.packages("genefilter")
install.packages("genefilter")
library(BiocInstaller)
biocLite("genefilter")
library(AnnotationHub)
ah = AnnotationHub()
mah = metadata(ah)
names(mah)
sort(table(mah$Species), decreasing=TRUE)[1:10]
sum(table(mah$Species))
names(query(query(ah, "HepG2"), "CTCF"))
library(Homo.sapiens)
g = genes(Homo.sapiens)
library(ERBS)
data(HepG2)
kp = g[resize(g,1) %over% HepG2]
kp
nn = names(kp)
m = select(Homo.sapiens, keys=nn, keytype="ENTREZID",
columns=c("SYMBOL", "GENENAME", "TERM", "GO"))
library(ReportingTools)
hrep = HTMLReport(shortName="erhep.html")
publish(m, hrep)
finish(hrep)
m = select(Homo.sapiens, keys=nn, keytype="ENTREZID",
columns=c("SYMBOL", "GENENAME", "TERM", "GO"))
nn = names(kp)
m = select(Homo.sapiens, keys=nn, keytype="ENTREZID",
columns=c("SYMBOL", "GENENAME", "TERM", "GO"))
install.packages("ReportingTools")
biocLite("ReportingTools")
data(HepG2)
kp = g[resize(g,1) %over% HepG2]
nn = names(kp)
m = select(Homo.sapiens, keys=nn, keytype="ENTREZID", columns=c("SYMBOL", "GENENAME", "TERM", "GO"))
library(Homo.sapiens)
g = genes(Homo.sapiens)
kp = g[resize(g,1) %over% HepG2]
nn = names(kp)
m = select(Homo.sapiens, keys=nn, keytype="ENTREZID", columns=c("SYMBOL", "GENENAME", "TERM", "GO"))
library(Homo.sapiens)
g = genes(Homo.sapiens)
library(ERBS)
data(HepG2)
kp = g[resize(g,1) %over% HepG2]
nn = names(kp)
m = select(Homo.sapiens, keys=nn, keytype="ENTREZID", columns=c("SYMBOL", "GENENAME", "TERM", "GO"))
sessionInfo()
library(ReportingTools)
hrep = HTMLReport(shortName="erhep.html")
publish(m, hrep)
finish(hrep)
getwd()
library(devtools)
install_github("genomicsclass/GSE5859Subset")
library(GSE5859Subset)
data(GSE5859Subset)
dim(geneExpression)
dim(sampleInfo)
dim(geneAnnotation)
identical(colnames(geneExpression),sampleInfo$filename)
identical(rownames(geneExpression),geneAnnotation$PROBEID)
library(Biobase)
pd = AnnotatedDataFrame(sampleInfo)
rownames(pd) = colnames(geneExpression)
pData(pd)["GSM136530.CEL.gz","date"]
varLabels(pd)
fd = AnnotatedDataFrame(geneAnnotation)
rownames(fd) = rownames(geneExpression)
pData(fd)["204810_s_at","CHR"]
str(sampleInfo)
str(expressionData)
str(expressionAnnotation)
eset = ExpressionSet(geneExpression,pd,fd)
ind1 = which( featureData(eset)$CHR=="chrY" )
ind2 =  pData(eset)$group==1
femaleY = colMeans(exprs(eset)[ind1, ind2])
maleY = colMeans(exprs(eset)[ind1, !ind2])
boxplot(maleY,femaleY)
median(maleY)-median(femaleY)
annotation(eset) = "hgfocus"
eset[1:10,1:5]
eset2 = ExpressionSet(assayData=geneExpression[1:10,1:5],
phenoData=pd[1:10,],
featureData=fd[1:5,],
annotation="hgfocus")
library(biocLite)
library(bioInstaller)
library("BiocInstaller", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
biocLite("passilaBamSubset")
bf <- BamFile(filename)
seqinfo(bf)
sl <- seqlengths(bf)
gr <- GRanges("chr4",IRanges(start = 440000, end = 470000))
countBam(bf, param=ScanBamParam(which = gr))
library(pasillaBamSubset)
biocLite("passilaBamSubset")
source("http://bioconductor.org/biocLite.R")
biocLite("pasilla")
library(pasillaBamSubset)
biocLite("pasillaBamSubset")
library(pasillaBamSubset)
library(Rsamtools)
filename = untreated1_chr4()
bf <- BamFile(filename)
seqinfo(bf)
sl <- seqlengths(bf)
gr <- GRanges("chr4",IRanges(start = 440000, end = 470000))
countBam(bf, param=ScanBamParam(which = gr))
sb <- scanBam(bf, param=ScanBamParam(which = gr,what = 'seq'))
rd<-sb[[1]]$seq
mean(letterFrequency(rd,'GC',as.prob = T))
library(GenomicAlignments)
ga = readGAlignments(BamFile(filename))
hist(start(ga), breaks=100)
biocLite("TxDb.Dmelanogaster.UCSC.dm3.ensGene")
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
g = genes(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
g2 = g[g %over% GRanges("chr4",IRanges(200000, 300000))]
x <- g2["FBgn0039890"]
strand(x)
countOverlaps(x, ga)
strand(x) <- "*"
countOverlaps(x, ga)
library(pasillaBamSubset)
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
txdb = TxDb.Dmelanogaster.UCSC.dm3.ensGene
g = genes(txdb)
g = g[seqnames(g) == "chr4"]
grl = exonsBy(txdb, by="gene")
grl = grl[names(g)]
all.equal(names(g), names(grl))
bf = BamFile(untreated1_chr4())
so1 <- summarizeOverlaps(features=grl,
reads=bf,
ignore.strand=TRUE)
so2 <- summarizeOverlaps(features=g,
reads=bf,
ignore.strand=TRUE)
mean(so1@assays$data@listData$counts[!so2@assays$data@listData$counts==0,]/so2@assays$data@listData$counts[!so2@assays$data@listData$counts==0,])
plot(assay(so1),assay(so2),log="xy");abline(0,1)
plot(assay(so1)+1,assay(so2)+1,log="xy");abline(0,1)
ratio = assay(so1) / assay(so2)
mean(ratio[assay(so2) > 0])
assay(so1)/sum(assay(so1))*1e6
mean(sum(width(reduce(grl))))
4.275607e03/sum(width(reduce(grl))[1])*1000
download.file("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData","bottomly_eset.RData")
load("bottomly_eset.RData")
library("Biobase")
pData(bottomly.eset)
t <- exprs(bottomly.eset)
median(apply(t,2,function(x){mean(x==0)}))
p0s = colMeans( exprs(bottomly.eset) == 0)
boxplot(split( p0s , pData(bottomly.eset)$experiment.number))
library('genefilter')
A = rowMeans(exprs(bottomly.eset))
SD = rowSds(exprs(bottomly.eset))
plot(A,SD)
y = log2( exprs( bottomly.eset )+0.5)
library(rafalib)
mypar(2,1)
hist(y[,1],nc=100)
hist(y[y[,1]>0,1],nc=100)
abline(v=3)
y = exprs( bottomly.eset )
ind = which(apply( y>=8, 1, all))
y = log2( y[ind,] )
d = dist( t(y) )
mds = cmdscale(d)
batch = pData( bottomly.eset)$experiment.number - 3
strain = as.numeric(pData (bottomly.eset)$strain)
library(rafalib)
mypar2(1,1)
plot(mds,col=batch,pch=strain)
legend("topleft",col=unique(batch),legend=unique(batch)+3,pch=1)
legend("bottomleft",pch=unique(strain),legend=unique(strain))
library(devtools)
install_github("genomicsclass/maPooling")
library(maPooling)
data(maPooling)
library(dagdata)
u = exprs(maPooling)[,1]
v = exprs(maPooling)[,2]
x = exprs(maPooling)[,3]
y = exprs(maPooling)[,4]
cor(u,v)
cor(x,y)
cor((u-v),(x-y))
cor(log(u/v), log(x/y))
install_github("genomicsclass/maPooling")
devtools)
install_github("genomicsclass/maPooling")
library(
)
library(devtools)
install_github("genomicsclass/maPooling")
library(devtools)
install_github("genomicsclass/maPooling")
library(maPooling)
data(maPooling)
u = exprs(maPooling)[,1]
v = exprs(maPooling)[,2]
x = exprs(maPooling)[,3]
y = exprs(maPooling)[,4]
cor(u,v)
cor(x,y)
cor((u-v),(x-y))
cor(log(u/v), log(x/y))
library(rafalib)
library(affy)
library(SpikeIn)
library(hgu133atagcdf)
library(SpikeInSubset)
data(mas133)
e=exprs(mas133)##get expression
A=(log2(e[,4])+log2(e[,1]))/2
M=log2(e[,4]/e[,1])
siNames=colnames(pData(mas133))
siNames=siNames[pData(mas133)[4,]/pData(mas133)[1,]==2]
spikeinIndex=match(siNames,rownames(e))
mypar2(1,1)
splot(A,M,ylim=c(-4,4),cex=0.5)
abline(h=c(-1,1),col=1,lwd=2,lty=2)
points(A[spikeinIndex],M[spikeinIndex],bg=2,pch=21)
(package="SpikeInSubset")
data(SpikeIn133)
head(pData( SpikeIn133) )
data(SpikeIn133)
pd=pData(SpikeIn133)[1:14,] ##pick the first 14, rest are reps
pns=probeNames(SpikeIn133)
pms=pm(SpikeIn133)[,1:14] ##pick the first 14, rest are reps
ind=which(pns==colnames(pd)[1]) ##probes in gene 1
concentration=pd[,1]
concentration[concentration==0]= 1/16
mypar2(1,1)
matplot(log2(concentration),t(log2(pms[ind,])),xlab="log (base 2) concentration",ylab="log (base 2) instensity")
pd=pData(SpikeIn133) ## use all the replicates
pms=pm(SpikeIn133) ## use all the replicates
j = which(colnames(pd)=="203508_at")
ind=which(pns==colnames(pd)[j]) ##probes in gene 1
concentration=pd[,1]
i = which(concentration==0)
min( pms[ind,i] )
library(SpikeInSubset)
data(SpikeIn133)
biocLite("SpikeInSubset")
source("http://bioconductor.org/biocLite.R")
biocLite("SpikeInSubset")
library(SpikeInSubset)
data(SpikeIn133)
(package="SpikeInSubset")
data(SpikeIn133)
library(SpikeIn)
biocLite("SpikeIn")
biocLite("hgu133atagcdf")
library(SpikeIn)
library(hgu133atagcdf)
data(SpikeIn133)
head(pData( SpikeIn133) )
pd=pData(SpikeIn133)[1:14,] ##pick the first 14, rest are reps
pns=probeNames(SpikeIn133)
pms=pm(SpikeIn133)[,1:14] ##pick the first 14, rest are reps
ind=which(pns==colnames(pd)[1]) ##probes in gene 1
concentration=pd[,1]
concentration[concentration==0]= 1/16
mypar2(1,1)
matplot(log2(concentration),t(log2(pms[ind,])),xlab="log (base 2) concentration",ylab="log (base 2) instensity")
pd=pData(SpikeIn133) ## use all the replicates
pms=pm(SpikeIn133) ## use all the replicates
j = which(colnames(pd)=="203508_at")
ind=which(pns==colnames(pd)[j]) ##probes in gene 1
concentration=pd[,1]
i = which(concentration==0)
min( pms[ind,i] )
pd=pData(SpikeIn133) ## use all the replicates
pms=pm(SpikeIn133) ## use all the replicates
j = which(colnames(pd)=="203508_at")
concentration=pd[,j]
i = which(concentration==0)
ind=which(pns==colnames(pd)[j])
max( pms[ind,i] )
max(ind)
ind
mms = mm(SpikeIn133)
cor(log2(as.vector(pms[ind,i])),log2(as.vector(mms[ind,i])))
bg1 = bg.correct.mas(SpikeIn133)
bg2 = bg.correct.rma(SpikeIn133)
pd= pData(SpikeIn133)
pns=probeNames(SpikeIn133)
pms1=pm(bg1)
pms2=pm(bg2)
ind=which(pns==colnames(pd)[1]) ##probes in gene 1
concentration=pd[,1]
concentration[concentration==0]= 1/16
mypar2(1,2)
matplot(log2(concentration),t(log2(pms1[ind,])),xlab="log (base 2) concentration",ylab="log (base 2) instensity",ylim=c(0,13))
matplot(log2(concentration),t(log2(pms2[ind,])),xlab="log (base 2) concentration",ylab="log (base 2) instensity",ylim=c(0,13))
ind = c(1,15,29)
pm1 = log2( pm(bg1)[,ind])
pm2 = log2( pm(bg2)[,ind])
SD1 = rowSds(pm1)
A1 = rowMeans(pm1)
SD2 = rowSds(pm2)
A2 = rowMeans(pm2)
mypar2(2,1)
splot(A1,SD1,ylim=c(0,3),cex=.25)
splot(A2,SD2,ylim=c(0,3),cex=.25)
library(matrixStats)
SD1 = rowSds(pm1)
A1 = rowMeans(pm1)
SD2 = rowSds(pm2)
A2 = rowMeans(pm2)
mypar2(2,1)
splot(A1,SD1,ylim=c(0,3),cex=.25)
splot(A2,SD2,ylim=c(0,3),cex=.25)
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
getMethod()
?getMethod()
getMethod
?getMethod
showMethods
?showMethods
getClass
?predict
?lm
?colSums
?dGamma
?dgamma
?lm
?predict
lm
predict
dgamma
colSums
?mean
lm
mean
showMethods("mean")
ftype(mean)
library(pryr)
shiny::runApp('Downloads/hefner-app')
shiny::runApp('Downloads/hefner-app')
install.packages("lattice")
install.packages("ggplot2")
install.packages("caret")
library(caret)
library("minqa", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
remove.packages("minqa")
install.pakcages("minqa")
install.packages("minqa")
library(caret)
remove.packages("SparseM")
library(caret)
install.packages("SparseM")
library(caret)
library("quantreg", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:quantreg", unload=TRUE)
remove.packages("quantreg")
shiny::runApp('Desktop/cranid')
shiny::runApp('Desktop/cranid')
shiny::runApp('Desktop/cranid')
shiny::runApp('Desktop/cranid')
getwd()
setwd("./Desktop/cranExplr")
runApp()
library(shiny)
runApp()
library(shinyapps)
deployApp()
shinyapps::showLogs()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
deployApp()
shinyapps::showLogs()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
